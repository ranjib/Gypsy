// Copyright 2015 Ranjib Dey.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package command

import (
	"github.com/ranjib/gypsy/dockerfile"
	"github.com/ranjib/gypsy/util"
	log "github.com/sirupsen/logrus"
	"io"
	"os"
	"strings"
)

type DockerfileCommand struct {
	Meta
}

func (c *DockerfileCommand) Help() string {
	helpString := `
	Usage: gypsy dockerfile [-file Dockerfile][-name ContainerName]"

	General Options:
	` + generalOptionsUage()
	return strings.TrimSpace(helpString)
}

func (c *DockerfileCommand) Synopsis() string {
	return "Create container from a dockerfile"
}

func (c *DockerfileCommand) Run(args []string) int {
	var file string
	var name string
	flags := c.Meta.FlagSet("dockerfile", FlagSetClient)
	flags.StringVar(&file, "file", "Dockerfile", "Path to dockerfile like specification")
	flags.StringVar(&name, "name", "", "Name of the container (default will be autogenerated uuid)")
	flags.Usage = func() { c.Ui.Output(c.Help()) }
	if err := flags.Parse(args); err != nil {
		log.Errorf("Failed to parse cli arguments. Error: %s\n", err)
		return 1
	}
	var logOutput io.Writer
	if c.Meta.logOutput != "" {
		fi, err := os.OpenFile(c.Meta.logOutput, os.O_CREATE|os.O_WRONLY, 0644)
		if err != nil {
			log.Errorf("Failed to open log output file '%s'. Error: %s\n", c.Meta.logOutput, err)
			return -1
		}
		defer fi.Close()
		logOutput = fi
	} else {
		logOutput = os.Stdout
	}
	util.ConfigureLogging(c.Meta.logLevel, c.Meta.logFormat, logOutput)
	if name == "" {
		id, err := util.UUID()
		if err != nil {
			log.Errorf("Failed to generate uuid. Error: %s\n", err)
			return -1
		}
		name = id
		log.Infof("No name given. Using uuid %s\n", name)
	}
	spec := dockerfile.NewSpec(name, file)
	if err := spec.Parse(); err != nil {
		log.Errorf("Failed to parse dockerfile. Error: %s\n", err)
		return -1
	}
	log.Debugf("Successfully parse dockerfile")
	if err := spec.Build(); err != nil {
		log.Errorf("Failed to build container from dockerfile. Error: %s\n", err)
		return -1
	}
	log.Debugf("Successfully parse dockerfile")
	return 0
}
