package command

import (
	"github.com/ranjib/gypsy/dockerfile"
	"github.com/ranjib/gypsy/util"
	log "github.com/sirupsen/logrus"
)

type DockerfileCommand struct {
	Meta
}

func (c *DockerfileCommand) Help() string {
	return "gypsy dockerfile [-file Dockerfile][-name ContainerName]"
}

func (c *DockerfileCommand) Synopsis() string {
	return "Create container from a dockerfile"
}

func (c *DockerfileCommand) Run(args []string) int {
	var file string
	var name string
	flags := c.Meta.FlagSet("dockerfile", FlagSetClient)
	flags.StringVar(&file, "file", "Dockerfile", "Path to dockerfile like specification")
	flags.StringVar(&name, "name", "", "Name of the container (default will be autogenerated uuid)")
	flags.Usage = func() { c.Ui.Output(c.Help()) }
	if err := flags.Parse(args); err != nil {
		log.Errorf("Failed to parse cli arguments. Error: %s\n", err)
		return 1
	}
	if name == "" {
		id, err := util.UUID()
		if err != nil {
			log.Errorf("Failed to generate uuid. Error: %s\n", err)
			return -1
		}
		name = id
		log.Infof("No name given. Using uuid %s\n", name)
	}
	spec := dockerfile.NewSpec(name, file)
	if err := spec.Parse(); err != nil {
		log.Errorf("Failed to parse dockerfile. Error: %s\n", err)
		return -1
	}
	log.Debugf("Successfully parse dockerfile")
	if err := spec.Build(); err != nil {
		log.Errorf("Failed to build container from dockerfile. Error: %s\n", err)
		return -1
	}
	log.Debugf("Successfully parse dockerfile")
	return 0
}
